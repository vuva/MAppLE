// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: StreamI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
	wire "github.com/lucas-clemente/quic-go/internal/wire"
)

// MockStreamI is a mock of StreamI interface
type MockStreamI struct {
	ctrl     *gomock.Controller
	recorder *MockStreamIMockRecorder
}

// MockStreamIMockRecorder is the mock recorder for MockStreamI
type MockStreamIMockRecorder struct {
	mock *MockStreamI
}

// NewMockStreamI creates a new mock instance
func NewMockStreamI(ctrl *gomock.Controller) *MockStreamI {
	mock := &MockStreamI{ctrl: ctrl}
	mock.recorder = &MockStreamIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamI) EXPECT() *MockStreamIMockRecorder {
	return m.recorder
}

// AddBytesRetrans mocks base method
func (m *MockStreamI) AddBytesRetrans(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "AddBytesRetrans", arg0)
}

// AddBytesRetrans indicates an expected call of AddBytesRetrans
func (mr *MockStreamIMockRecorder) AddBytesRetrans(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesRetrans", reflect.TypeOf((*MockStreamI)(nil).AddBytesRetrans), arg0)
}

// AddStreamFrame mocks base method
func (m *MockStreamI) AddStreamFrame(arg0 *wire.StreamFrame) error {
	ret := m.ctrl.Call(m, "AddStreamFrame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStreamFrame indicates an expected call of AddStreamFrame
func (mr *MockStreamIMockRecorder) AddStreamFrame(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamFrame", reflect.TypeOf((*MockStreamI)(nil).AddStreamFrame), arg0)
}

// Cancel mocks base method
func (m *MockStreamI) Cancel(arg0 error) {
	m.ctrl.Call(m, "Cancel", arg0)
}

// Cancel indicates an expected call of Cancel
func (mr *MockStreamIMockRecorder) Cancel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockStreamI)(nil).Cancel), arg0)
}

// Close mocks base method
func (m *MockStreamI) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStreamIMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamI)(nil).Close))
}

// Context mocks base method
func (m *MockStreamI) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockStreamIMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamI)(nil).Context))
}

// Finished mocks base method
func (m *MockStreamI) Finished() bool {
	ret := m.ctrl.Call(m, "Finished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Finished indicates an expected call of Finished
func (mr *MockStreamIMockRecorder) Finished() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockStreamI)(nil).Finished))
}

// GetBytesRetrans mocks base method
func (m *MockStreamI) GetBytesRetrans() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetBytesRetrans")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetBytesRetrans indicates an expected call of GetBytesRetrans
func (mr *MockStreamIMockRecorder) GetBytesRetrans() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesRetrans", reflect.TypeOf((*MockStreamI)(nil).GetBytesRetrans))
}

// GetBytesSent mocks base method
func (m *MockStreamI) GetBytesSent() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetBytesSent")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetBytesSent indicates an expected call of GetBytesSent
func (mr *MockStreamIMockRecorder) GetBytesSent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesSent", reflect.TypeOf((*MockStreamI)(nil).GetBytesSent))
}

// GetDataForWriting mocks base method
func (m *MockStreamI) GetDataForWriting(arg0 protocol.ByteCount) []byte {
	ret := m.ctrl.Call(m, "GetDataForWriting", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetDataForWriting indicates an expected call of GetDataForWriting
func (mr *MockStreamIMockRecorder) GetDataForWriting(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataForWriting", reflect.TypeOf((*MockStreamI)(nil).GetDataForWriting), arg0)
}

// GetMessageMode mocks base method
func (m *MockStreamI) GetMessageMode() bool {
	ret := m.ctrl.Call(m, "GetMessageMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetMessageMode indicates an expected call of GetMessageMode
func (mr *MockStreamIMockRecorder) GetMessageMode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageMode", reflect.TypeOf((*MockStreamI)(nil).GetMessageMode))
}

// GetReliabilityDeadline mocks base method
func (m *MockStreamI) GetReliabilityDeadline() time.Duration {
	ret := m.ctrl.Call(m, "GetReliabilityDeadline")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetReliabilityDeadline indicates an expected call of GetReliabilityDeadline
func (mr *MockStreamIMockRecorder) GetReliabilityDeadline() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReliabilityDeadline", reflect.TypeOf((*MockStreamI)(nil).GetReliabilityDeadline))
}

// GetReplayBufferSize mocks base method
func (m *MockStreamI) GetReplayBufferSize() uint64 {
	ret := m.ctrl.Call(m, "GetReplayBufferSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetReplayBufferSize indicates an expected call of GetReplayBufferSize
func (mr *MockStreamIMockRecorder) GetReplayBufferSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplayBufferSize", reflect.TypeOf((*MockStreamI)(nil).GetReplayBufferSize))
}

// GetRetransmissionDeadLine mocks base method
func (m *MockStreamI) GetRetransmissionDeadLine() time.Duration {
	ret := m.ctrl.Call(m, "GetRetransmissionDeadLine")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRetransmissionDeadLine indicates an expected call of GetRetransmissionDeadLine
func (mr *MockStreamIMockRecorder) GetRetransmissionDeadLine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetransmissionDeadLine", reflect.TypeOf((*MockStreamI)(nil).GetRetransmissionDeadLine))
}

// GetWindowUpdate mocks base method
func (m *MockStreamI) GetWindowUpdate(arg0 bool) protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetWindowUpdate", arg0)
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetWindowUpdate indicates an expected call of GetWindowUpdate
func (mr *MockStreamIMockRecorder) GetWindowUpdate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowUpdate", reflect.TypeOf((*MockStreamI)(nil).GetWindowUpdate), arg0)
}

// GetWriteOffset mocks base method
func (m *MockStreamI) GetWriteOffset() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetWriteOffset")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetWriteOffset indicates an expected call of GetWriteOffset
func (mr *MockStreamIMockRecorder) GetWriteOffset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteOffset", reflect.TypeOf((*MockStreamI)(nil).GetWriteOffset))
}

// IsFlowControlBlocked mocks base method
func (m *MockStreamI) IsFlowControlBlocked() bool {
	ret := m.ctrl.Call(m, "IsFlowControlBlocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFlowControlBlocked indicates an expected call of IsFlowControlBlocked
func (mr *MockStreamIMockRecorder) IsFlowControlBlocked() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFlowControlBlocked", reflect.TypeOf((*MockStreamI)(nil).IsFlowControlBlocked))
}

// IsUnreliable mocks base method
func (m *MockStreamI) IsUnreliable() bool {
	ret := m.ctrl.Call(m, "IsUnreliable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnreliable indicates an expected call of IsUnreliable
func (mr *MockStreamIMockRecorder) IsUnreliable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnreliable", reflect.TypeOf((*MockStreamI)(nil).IsUnreliable))
}

// LenOfDataForWriting mocks base method
func (m *MockStreamI) LenOfDataForWriting() protocol.ByteCount {
	ret := m.ctrl.Call(m, "LenOfDataForWriting")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// LenOfDataForWriting indicates an expected call of LenOfDataForWriting
func (mr *MockStreamIMockRecorder) LenOfDataForWriting() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LenOfDataForWriting", reflect.TypeOf((*MockStreamI)(nil).LenOfDataForWriting))
}

// Read mocks base method
func (m *MockStreamI) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStreamIMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStreamI)(nil).Read), arg0)
}

// RegisterRemoteError mocks base method
func (m *MockStreamI) RegisterRemoteError(arg0 error, arg1 protocol.ByteCount) error {
	ret := m.ctrl.Call(m, "RegisterRemoteError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRemoteError indicates an expected call of RegisterRemoteError
func (mr *MockStreamIMockRecorder) RegisterRemoteError(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRemoteError", reflect.TypeOf((*MockStreamI)(nil).RegisterRemoteError), arg0, arg1)
}

// Reset mocks base method
func (m *MockStreamI) Reset(arg0 error) {
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset
func (mr *MockStreamIMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockStreamI)(nil).Reset), arg0)
}

// SentFin mocks base method
func (m *MockStreamI) SentFin() {
	m.ctrl.Call(m, "SentFin")
}

// SentFin indicates an expected call of SentFin
func (mr *MockStreamIMockRecorder) SentFin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentFin", reflect.TypeOf((*MockStreamI)(nil).SentFin))
}

// SetDeadline mocks base method
func (m *MockStreamI) SetDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline
func (mr *MockStreamIMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockStreamI)(nil).SetDeadline), arg0)
}

// SetMessageMode mocks base method
func (m *MockStreamI) SetMessageMode(arg0 bool) {
	m.ctrl.Call(m, "SetMessageMode", arg0)
}

// SetMessageMode indicates an expected call of SetMessageMode
func (mr *MockStreamIMockRecorder) SetMessageMode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageMode", reflect.TypeOf((*MockStreamI)(nil).SetMessageMode), arg0)
}

// SetReadDeadline mocks base method
func (m *MockStreamI) SetReadDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *MockStreamIMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockStreamI)(nil).SetReadDeadline), arg0)
}

// SetReliabilityDeadline mocks base method
func (m *MockStreamI) SetReliabilityDeadline(arg0 time.Duration) {
	m.ctrl.Call(m, "SetReliabilityDeadline", arg0)
}

// SetReliabilityDeadline indicates an expected call of SetReliabilityDeadline
func (mr *MockStreamIMockRecorder) SetReliabilityDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReliabilityDeadline", reflect.TypeOf((*MockStreamI)(nil).SetReliabilityDeadline), arg0)
}

// SetReplayBufferSize mocks base method
func (m *MockStreamI) SetReplayBufferSize(arg0 uint64) {
	m.ctrl.Call(m, "SetReplayBufferSize", arg0)
}

// SetReplayBufferSize indicates an expected call of SetReplayBufferSize
func (mr *MockStreamIMockRecorder) SetReplayBufferSize(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplayBufferSize", reflect.TypeOf((*MockStreamI)(nil).SetReplayBufferSize), arg0)
}

// SetRetransmissionDeadline mocks base method
func (m *MockStreamI) SetRetransmissionDeadline(arg0 time.Duration) {
	m.ctrl.Call(m, "SetRetransmissionDeadline", arg0)
}

// SetRetransmissionDeadline indicates an expected call of SetRetransmissionDeadline
func (mr *MockStreamIMockRecorder) SetRetransmissionDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetransmissionDeadline", reflect.TypeOf((*MockStreamI)(nil).SetRetransmissionDeadline), arg0)
}

// SetUnreliable mocks base method
func (m *MockStreamI) SetUnreliable(arg0 bool) {
	m.ctrl.Call(m, "SetUnreliable", arg0)
}

// SetUnreliable indicates an expected call of SetUnreliable
func (mr *MockStreamIMockRecorder) SetUnreliable(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnreliable", reflect.TypeOf((*MockStreamI)(nil).SetUnreliable), arg0)
}

// SetWriteDeadline mocks base method
func (m *MockStreamI) SetWriteDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (mr *MockStreamIMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockStreamI)(nil).SetWriteDeadline), arg0)
}

// ShouldSendFin mocks base method
func (m *MockStreamI) ShouldSendFin() bool {
	ret := m.ctrl.Call(m, "ShouldSendFin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSendFin indicates an expected call of ShouldSendFin
func (mr *MockStreamIMockRecorder) ShouldSendFin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSendFin", reflect.TypeOf((*MockStreamI)(nil).ShouldSendFin))
}

// StreamID mocks base method
func (m *MockStreamI) StreamID() protocol.StreamID {
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(protocol.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID
func (mr *MockStreamIMockRecorder) StreamID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockStreamI)(nil).StreamID))
}

// UpdateSendWindow mocks base method
func (m *MockStreamI) UpdateSendWindow(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "UpdateSendWindow", arg0)
}

// UpdateSendWindow indicates an expected call of UpdateSendWindow
func (mr *MockStreamIMockRecorder) UpdateSendWindow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendWindow", reflect.TypeOf((*MockStreamI)(nil).UpdateSendWindow), arg0)
}

// Write mocks base method
func (m *MockStreamI) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockStreamIMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStreamI)(nil).Write), arg0)
}
