// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/internal/flowcontrol (interfaces: StreamFlowController)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockStreamFlowController is a mock of StreamFlowController interface
type MockStreamFlowController struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFlowControllerMockRecorder
}

// MockStreamFlowControllerMockRecorder is the mock recorder for MockStreamFlowController
type MockStreamFlowControllerMockRecorder struct {
	mock *MockStreamFlowController
}

// NewMockStreamFlowController creates a new mock instance
func NewMockStreamFlowController(ctrl *gomock.Controller) *MockStreamFlowController {
	mock := &MockStreamFlowController{ctrl: ctrl}
	mock.recorder = &MockStreamFlowControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamFlowController) EXPECT() *MockStreamFlowControllerMockRecorder {
	return m.recorder
}

// AddBytesRead mocks base method
func (m *MockStreamFlowController) AddBytesRead(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "AddBytesRead", arg0)
}

// AddBytesRead indicates an expected call of AddBytesRead
func (mr *MockStreamFlowControllerMockRecorder) AddBytesRead(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesRead", reflect.TypeOf((*MockStreamFlowController)(nil).AddBytesRead), arg0)
}

// AddBytesRetrans mocks base method
func (m *MockStreamFlowController) AddBytesRetrans(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "AddBytesRetrans", arg0)
}

// AddBytesRetrans indicates an expected call of AddBytesRetrans
func (mr *MockStreamFlowControllerMockRecorder) AddBytesRetrans(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesRetrans", reflect.TypeOf((*MockStreamFlowController)(nil).AddBytesRetrans), arg0)
}

// AddBytesSent mocks base method
func (m *MockStreamFlowController) AddBytesSent(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "AddBytesSent", arg0)
}

// AddBytesSent indicates an expected call of AddBytesSent
func (mr *MockStreamFlowControllerMockRecorder) AddBytesSent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesSent", reflect.TypeOf((*MockStreamFlowController)(nil).AddBytesSent), arg0)
}

// GetBytesRetrans mocks base method
func (m *MockStreamFlowController) GetBytesRetrans() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetBytesRetrans")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetBytesRetrans indicates an expected call of GetBytesRetrans
func (mr *MockStreamFlowControllerMockRecorder) GetBytesRetrans() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesRetrans", reflect.TypeOf((*MockStreamFlowController)(nil).GetBytesRetrans))
}

// GetBytesSent mocks base method
func (m *MockStreamFlowController) GetBytesSent() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetBytesSent")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetBytesSent indicates an expected call of GetBytesSent
func (mr *MockStreamFlowControllerMockRecorder) GetBytesSent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytesSent", reflect.TypeOf((*MockStreamFlowController)(nil).GetBytesSent))
}

// GetHighestReceived mocks base method
func (m *MockStreamFlowController) GetHighestReceived() protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetHighestReceived")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetHighestReceived indicates an expected call of GetHighestReceived
func (mr *MockStreamFlowControllerMockRecorder) GetHighestReceived() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestReceived", reflect.TypeOf((*MockStreamFlowController)(nil).GetHighestReceived))
}

// GetWindowUpdate mocks base method
func (m *MockStreamFlowController) GetWindowUpdate(arg0 bool) protocol.ByteCount {
	ret := m.ctrl.Call(m, "GetWindowUpdate", arg0)
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// GetWindowUpdate indicates an expected call of GetWindowUpdate
func (mr *MockStreamFlowControllerMockRecorder) GetWindowUpdate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowUpdate", reflect.TypeOf((*MockStreamFlowController)(nil).GetWindowUpdate), arg0)
}

// IsBlocked mocks base method
func (m *MockStreamFlowController) IsBlocked() bool {
	ret := m.ctrl.Call(m, "IsBlocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlocked indicates an expected call of IsBlocked
func (mr *MockStreamFlowControllerMockRecorder) IsBlocked() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockStreamFlowController)(nil).IsBlocked))
}

// SendWindowSize mocks base method
func (m *MockStreamFlowController) SendWindowSize() protocol.ByteCount {
	ret := m.ctrl.Call(m, "SendWindowSize")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// SendWindowSize indicates an expected call of SendWindowSize
func (mr *MockStreamFlowControllerMockRecorder) SendWindowSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWindowSize", reflect.TypeOf((*MockStreamFlowController)(nil).SendWindowSize))
}

// UpdateHighestReceived mocks base method
func (m *MockStreamFlowController) UpdateHighestReceived(arg0 protocol.ByteCount, arg1 bool) error {
	ret := m.ctrl.Call(m, "UpdateHighestReceived", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHighestReceived indicates an expected call of UpdateHighestReceived
func (mr *MockStreamFlowControllerMockRecorder) UpdateHighestReceived(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHighestReceived", reflect.TypeOf((*MockStreamFlowController)(nil).UpdateHighestReceived), arg0, arg1)
}

// UpdateSendWindow mocks base method
func (m *MockStreamFlowController) UpdateSendWindow(arg0 protocol.ByteCount) {
	m.ctrl.Call(m, "UpdateSendWindow", arg0)
}

// UpdateSendWindow indicates an expected call of UpdateSendWindow
func (mr *MockStreamFlowControllerMockRecorder) UpdateSendWindow(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendWindow", reflect.TypeOf((*MockStreamFlowController)(nil).UpdateSendWindow), arg0)
}
