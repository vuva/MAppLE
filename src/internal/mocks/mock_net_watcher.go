// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: NetWatcherI)

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetWatcherI is a mock of NetWatcherI interface
type MockNetWatcherI struct {
	ctrl     *gomock.Controller
	recorder *MockNetWatcherIMockRecorder
}

// MockNetWatcherIMockRecorder is the mock recorder for MockNetWatcherI
type MockNetWatcherIMockRecorder struct {
	mock *MockNetWatcherI
}

// NewMockNetWatcherI creates a new mock instance
func NewMockNetWatcherI(ctrl *gomock.Controller) *MockNetWatcherI {
	mock := &MockNetWatcherI{ctrl: ctrl}
	mock.recorder = &MockNetWatcherIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetWatcherI) EXPECT() *MockNetWatcherIMockRecorder {
	return m.recorder
}

// getInterfaceName mocks base method
func (m *MockNetWatcherI) getInterfaceName(arg0 net.UDPAddr) (string, bool) {
	ret := m.ctrl.Call(m, "getInterfaceName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// getInterfaceName indicates an expected call of getInterfaceName
func (mr *MockNetWatcherIMockRecorder) getInterfaceName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getInterfaceName", reflect.TypeOf((*MockNetWatcherI)(nil).getInterfaceName), arg0)
}

// lostPconn mocks base method
func (m *MockNetWatcherI) lostPconn() {
	m.ctrl.Call(m, "lostPconn")
}

// lostPconn indicates an expected call of lostPconn
func (mr *MockNetWatcherIMockRecorder) lostPconn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lostPconn", reflect.TypeOf((*MockNetWatcherI)(nil).lostPconn))
}

// run mocks base method
func (m *MockNetWatcherI) run() {
	m.ctrl.Call(m, "run")
}

// run indicates an expected call of run
func (mr *MockNetWatcherIMockRecorder) run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockNetWatcherI)(nil).run))
}

// setup mocks base method
func (m *MockNetWatcherI) setup() {
	m.ctrl.Call(m, "setup")
}

// setup indicates an expected call of setup
func (mr *MockNetWatcherIMockRecorder) setup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setup", reflect.TypeOf((*MockNetWatcherI)(nil).setup))
}
